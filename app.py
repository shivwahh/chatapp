# -*- coding: utf-8 -*-
"""Rakshak_R3.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1NB1MHq8a070l3YhrlMm7Kw25PcTgTGA4
"""

import random
import string # to process standard python strings
import numpy as np
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.metrics.pairwise import cosine_similarity
import warnings
warnings.filterwarnings('ignore')

import nltk
from nltk.stem import WordNetLemmatizer
from nltk.corpus import stopwords
from nltk.tokenize import word_tokenize

import pandas as pd

nltk.download('stopwords')
stop_words = stopwords.words('english')
stop_words.extend(list(string.punctuation))

def clean_data(text):
    rm_words = [w for w in word_tokenize(text) if w.lower() not in stop_words]
    return ' '.join(rm_words)

#Reading Data From Google Sheet
sheet_id = "1JwJ0Vxxm7xKYt4lzcc9t7r9zXuJXlyQ5ItP5wJfLxKg"
sheet_name = "Chatbot"
url = f"https://docs.google.com/spreadsheets/d/{sheet_id}/gviz/tq?tqx=out:csv&sheet={sheet_name}"
chats = pd.read_csv(url,header=0)

nltk.download('punkt')
chats['train_text'] = chats['text'].apply(clean_data)

human = []
bot = []
for i in range (len(chats)):
    if chats.iloc[i,0] == chats.iloc[i-1,0]:
        continue
    if chats.iloc[i,0] == "human":
        human.append(chats.iloc[i,-1])
    else:
        bot.append(chats.iloc[i,1])

lemmer = nltk.stem.WordNetLemmatizer()
#WordNet is a semantically-oriented dictionary of English included in NLTK.

def LemNormalize(text):
    return [lemmer.lemmatize(token) for token in nltk.word_tokenize(text.lower())]

nltk.download('wordnet')
nltk.download('omw-1.4')
Tfidfvector = TfidfVectorizer(tokenizer=LemNormalize, stop_words='english')
tfidf = Tfidfvector.fit_transform(human)

def response(user_response):
    user_response = [user_response]
    robo_response = ''
    tfidf_user_response = Tfidfvector.transform(user_response)
    vals = cosine_similarity(tfidf_user_response,tfidf)
    idx = vals.argsort()[0][-1]
    req_tfidf = vals[0][vals.argsort()[0][-1]]
    if req_tfidf==0:
        robo_response+="I am sorry! I don't understand you"
        return(robo_response)
    else:
        robo_response+=bot[idx]
        return (robo_response)

from flask import Flask, render_template, request

app = Flask(__name__)
app.static_folder = 'static'

@app.route("/")
def home():
    return render_template("index.html")

@app.route("/get")
def get_bot_response():
    userText = request.args.get('msg')
    return response(userText)


if __name__ == "__main__":
    app.run()

